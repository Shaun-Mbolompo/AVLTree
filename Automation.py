import os
import subprocess
import matplotlib.pyplot as plt
plt.rcParams['figure.figsize'] = {6,10}
import numpy as np


# call the GUI class
os.system("java -cp bin Gui")

# print on the terminal while  the program is still running
print("The graphs will be displayed in 2 seconds of the experiment result.")
print("For the experiment to end you need to close the graphs are reading the information on them")
print("by clicking the red x icon on the top right :-)")

# creates array objects for storing the results of opCount and insertOpcount from the AVLExperiment program
arrAvgSearch,arrMaxSearch,arrMinSearch,arrAvgInsert,arrMaxInsert,arrMinInsert = [],[],[],[],[],[]

# run the program for all the randomised datasets generated by the AVLExperiment program and append the output of each dataset 
# to the created arrays above 
for i in range(0,200001,10000):
    os.system("java -cp bin AVLExperiment "+str(i))
    open("data/search/searching_"+str(i),"r")
    open("data/insert/inserting_"+str(i),"r")
    arrAvgSearch.append(int(float(subprocess.getoutput(("awk 'BEGIN{sum = 0;counter=0;}{sum = sum + $1;counter = counter + 1}END{print sum/counter}' data/search/searching_"+str(i))))))
    arrAvgInsert.append(int(float(subprocess.getoutput(("awk 'BEGIN{sum = 0;counter=0;}{sum = sum + $1;counter = counter + 1}END{print sum/counter}' data/insert/inserting_"+str(i))))))
    arrMaxSearch.append(int(float(subprocess.getoutput(("sort -n data/search/searching_"+str(i)+" | tail -1")))))
    arrMaxInsert.append(int(float(subprocess.getoutput(("sort -n data/insert/inserting_"+str(i)+" | tail -1")))))
    arrMinSearch.append(int(float(subprocess.getoutput(("sort -n data/search/searching_"+str(i)+" | head -1")))))
    arrMinInsert.append(int(float(subprocess.getoutput(("sort -n data/insert/inserting_"+str(i)+" | head -1")))))

# create labels for the graph x-axis that will be displayed
x = ["0","10","20","30","40","50","60","70","80","90","100","110","120","130","140","150","160","170","180","190","200"]

# create the graphs for both the search and inserting comparison operations and display their average, minimum and maximum for all the 
# randomised datasets 
plt.plot(x,arrMinSearch,label = "Minimum",marker="o")
plt.plot(x,arrMaxSearch,label = "Maximum",marker="o")
plt.plot(x,arrAvgSearch,label = "Average",marker="o")
plt.xlabel("Randomisation (X) in 1000")
plt.ylabel("OpCount instrumentation")
plt.title("The opCount values for different degrees of randomisations for searching")
plt.locator_params('y',nbins=20)
plt.legend()
plt.grid()
plt.show()

plt.plot(x,arrMinInsert,label = "Minimum",marker="o")
plt.plot(x,arrMaxInsert,label = "Maximum",marker="o")
plt.plot(x,arrAvgInsert,label = "Average",marker="o")
plt.xlabel("Randomisation (X) in 1000")
plt.ylabel("OpCount instrumentation")
plt.title("The opCount values for different degrees of randomisations for inserting")
plt.locator_params('y',nbins=20)
plt.legend()
plt.grid()
plt.show()
